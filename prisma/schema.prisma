// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SocialProvider {
  GOOGLE
  GITHUB
  APPLE
}

enum CardStatus {
  REFINEMENT
  READY
  IN_PROGRESS
  BLOCKED
  READY_FOR_REVIEW
  COMPLETED
}

enum SubscriptionTierType {
  FREE
  INDIE
  PROFESSIONAL
}

enum AgentInstructionType {
  GIT
  SPIKE
  CODING
  ARCHITECTURE
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  users     User[]
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             String         @id @default(cuid())
  name           String
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  ownerId        String
  owner          User           @relation("ProjectOwner", fields: [ownerId], references: [id])
  users          ProjectUser[]
  cards          Card[]
  labels         Label[]
  sprints        Sprint[]
  apiKey         String?        @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model AIWorkLog {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  activity  String
  endpoint  String?
  payload   Json?
  response  Json?
  createdAt DateTime @default(now())
}

model Card {
  id                      String                @id @default(cuid())
  status                  CardStatus            @default(REFINEMENT)
  projectId               String
  project                 Project               @relation(fields: [projectId], references: [id])
  createdById             String
  createdBy               User                  @relation("CardCreator", fields: [createdById], references: [id])
  assigneeId              String?
  assignee                User?                 @relation("CardAssignee", fields: [assigneeId], references: [id])
  sprintId                String?
  sprint                  Sprint?               @relation(fields: [sprintId], references: [id])
  title                   String
  description             String?
  acceptanceCriteria      String?
  isAiAllowedTask         Boolean               @default(true)
  priority                Int                   @default(3)
  effortPoints            Int                   @default(5)
  agentDeveloperInstructions AgentDeveloperInstruction[]
  comments                Comment[]
  labels                  CardLabel[]
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model AgentDeveloperInstruction {
  id                    String                @id @default(cuid())
  cardId                String
  card                  Card                  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  type                  AgentInstructionType
  
  // Git Instructions
  branchName            String?
  createNewBranch       Boolean               @default(false)
  
  // Spike/Research Instructions
  webResearchPrompt     String?
  codeResearchPrompt    String?
  architecturePrompt    String?
  
  // General Instructions
  instructions          String?
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model User {
  id                       String                   @id @default(cuid())
  name                     String?
  email                    String?                  @unique
  emailVerified            DateTime?
  image                    String?
  socialProvider           SocialProvider?
  organizationId           String?
  organization             Organization?            @relation(fields: [organizationId], references: [id])
  isAdmin                  Boolean                  @default(false)
  subscriptionInformationId String?                 @unique
  subscriptionInformation  SubscriptionInformation? @relation(fields: [subscriptionInformationId], references: [id])
  createdCards             Card[]                   @relation("CardCreator")
  assignedCards            Card[]                   @relation("CardAssignee")
  ownedProjects            Project[]                @relation("ProjectOwner")
  projects                 ProjectUser[]
  comments                 Comment[]
  accounts                 Account[]
  sessions                 Session[]
  userKeys                 UserKey[]
  usageTracking            UserUsageTracking?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionTier {
  id                      String                    @id @default(cuid())
  tier                    SubscriptionTierType      @unique
  projectLimit            Int
  dailyCardProcessLimit   Int
  subscriptionInformations SubscriptionInformation[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
}

model SubscriptionInformation {
  id                      String           @id @default(cuid())
  stripeSubscriptionId    String?          @unique
  stripeCustomerId        String?
  subscriptionTierId      String
  subscriptionTier        SubscriptionTier @relation(fields: [subscriptionTierId], references: [id])
  user                    User?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model ProjectUser {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  content   String
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  isAiComment Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id        String      @id @default(cuid())
  name      String
  color     String      // Hex color code
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cards     CardLabel[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([name, projectId]) // Prevent duplicate label names within a project
}

model CardLabel {
  id      String @id @default(cuid())
  cardId  String
  card    Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  labelId String
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([cardId, labelId]) // Prevent duplicate label assignments
}

model UserKey {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keyHash   String   @unique // Store hashed version of the key for security
  keyPrefix String   // Store first 8 chars for display purposes (e.g., "vhk_abcd...")
  name      String?  // Optional name for the key
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserUsageTracking {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyCardsCreated     Int      @default(0)
  dailyProjectsCreated  Int      @default(0)
  lastResetDate         DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Sprint {
  id          String   @id @default(cuid())
  name        String
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean  @default(false)
  cards       Card[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId, isActive])
}
