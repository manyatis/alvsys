// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

enum SocialProvider {
  GOOGLE
  GITHUB
  APPLE
}

enum CardStatus {
  REFINEMENT
  READY
  IN_PROGRESS
  BLOCKED
  READY_FOR_REVIEW
  COMPLETED
}

enum SubscriptionTierType {
  FREE
  INDIE
  PROFESSIONAL
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  users     User[]
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             String         @id @default(cuid())
  name           String
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  ownerId        String
  owner          User           @relation("ProjectOwner", fields: [ownerId], references: [id])
  users          ProjectUser[]
  cards          Card[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model AIWorkLog {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  activity  String
  endpoint  String?
  payload   Json?
  response  Json?
  createdAt DateTime @default(now())
}

model Card {
  id          String     @id @default(cuid())
  status      CardStatus @default(REFINEMENT)
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id])
  title       String
  description String?
  isAiAllowedTask Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model User {
  id                       String                   @id @default(cuid())
  name                     String?
  email                    String?                  @unique
  emailVerified            DateTime?
  image                    String?
  socialProvider           SocialProvider?
  organizationId           String?
  organization             Organization?            @relation(fields: [organizationId], references: [id])
  isAdmin                  Boolean                  @default(false)
  subscriptionInformationId String?                 @unique
  subscriptionInformation  SubscriptionInformation? @relation(fields: [subscriptionInformationId], references: [id])
  cards                    Card[]
  ownedProjects            Project[]                @relation("ProjectOwner")
  projects                 ProjectUser[]
  accounts                 Account[]
  sessions                 Session[]
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionTier {
  id                      String                    @id @default(cuid())
  tier                    SubscriptionTierType      @unique
  projectLimit            Int
  dailyCardProcessLimit   Int
  subscriptionInformations SubscriptionInformation[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
}

model SubscriptionInformation {
  id                      String           @id @default(cuid())
  stripeSubscriptionId    String?          @unique
  stripeCustomerId        String?
  subscriptionTierId      String
  subscriptionTier        SubscriptionTier @relation(fields: [subscriptionTierId], references: [id])
  user                    User?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model ProjectUser {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}
